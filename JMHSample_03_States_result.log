# JMH version: 1.21
# VM version: JDK 1.8.0_74, Java HotSpot(TM) 64-Bit Server VM, 25.74-b02
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=56789:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.cxd.benchmark.JMHSample_03_States.measureShared

# Run progress: 0.00% complete, ETA 00:03:20
# Fork: 1 of 1
objc[56252]: Class JavaLaunchHelper is implemented in both /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/bin/java (0x10f8414c0) and /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/lib/libinstrument.dylib (0x10f8c54e0). One of the two will be used. Which one is undefined.
# Warmup Iteration   1: 53696349.525 ops/s
# Warmup Iteration   2: 51953665.260 ops/s
# Warmup Iteration   3: 52360387.948 ops/s
# Warmup Iteration   4: 51773576.893 ops/s
# Warmup Iteration   5: 52829369.629 ops/s
Iteration   1: 52473439.206 ops/s
Iteration   2: 54324743.290 ops/s
Iteration   3: 52058216.349 ops/s
Iteration   4: 52277589.403 ops/s
Iteration   5: 52178650.784 ops/s


Result "com.cxd.benchmark.JMHSample_03_States.measureShared":
  52662527.806 ±(99.9%) 3625653.584 ops/s [Average]
  (min, avg, max) = (52058216.349, 52662527.806, 54324743.290), stdev = 941570.722
  CI (99.9%): [49036874.223, 56288181.390] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_74, Java HotSpot(TM) 64-Bit Server VM, 25.74-b02
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=56789:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.cxd.benchmark.JMHSample_03_States.measureUnshared

# Run progress: 50.00% complete, ETA 00:01:41
# Fork: 1 of 1
objc[56266]: Class JavaLaunchHelper is implemented in both /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/bin/java (0x1051ac4c0) and /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/lib/libinstrument.dylib (0x1069dd4e0). One of the two will be used. Which one is undefined.
# Warmup Iteration   1: 283855536.739 ops/s
# Warmup Iteration   2: 287710686.317 ops/s
# Warmup Iteration   3: 286629551.119 ops/s
# Warmup Iteration   4: 268795732.601 ops/s
# Warmup Iteration   5: 281368158.088 ops/s
Iteration   1: 269955534.214 ops/s
Iteration   2: 278264107.468 ops/s
Iteration   3: 280237686.029 ops/s
Iteration   4: 277354185.617 ops/s
Iteration   5: 255394575.387 ops/s


Result "com.cxd.benchmark.JMHSample_03_States.measureUnshared":
  272241217.743 ±(99.9%) 39240444.785 ops/s [Average]
  (min, avg, max) = (255394575.387, 272241217.743, 280237686.029), stdev = 10190618.897
  CI (99.9%): [233000772.959, 311481662.528] (assumes normal distribution)


# Run complete. Total time: 00:03:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             Mode  Cnt          Score          Error  Units
JMHSample_03_States.measureShared    thrpt    5   52662527.806 ±  3625653.584  ops/s
JMHSample_03_States.measureUnshared  thrpt    5  272241217.743 ± 39240444.785  ops/s
