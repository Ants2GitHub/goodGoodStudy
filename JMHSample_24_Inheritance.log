# JMH version: 1.21
# VM version: JDK 1.8.0_74, Java HotSpot(TM) 64-Bit Server VM, 25.74-b02
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=60419:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 100 ms each
# Measurement: 5 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.cxd.benchmark.JMHSample_24_Inheritance.BenchmarkLog.bench

# Run progress: 0.00% complete, ETA 00:00:03
# Fork: 1 of 1
objc[71617]: Class JavaLaunchHelper is implemented in both /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/bin/java (0x1015944c0) and /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/lib/libinstrument.dylib (0x102da84e0). One of the two will be used. Which one is undefined.
# Warmup Iteration   1: 0.030 ops/ns
# Warmup Iteration   2: 0.025 ops/ns
# Warmup Iteration   3: 0.027 ops/ns
# Warmup Iteration   4: 0.026 ops/ns
# Warmup Iteration   5: 0.024 ops/ns
Iteration   1: 0.024 ops/ns
Iteration   2: 0.029 ops/ns
Iteration   3: 0.029 ops/ns
Iteration   4: 0.025 ops/ns
Iteration   5: 0.022 ops/ns


Result "com.cxd.benchmark.JMHSample_24_Inheritance.BenchmarkLog.bench":
  0.026 ±(99.9%) 0.012 ops/ns [Average]
  (min, avg, max) = (0.022, 0.026, 0.029), stdev = 0.003
  CI (99.9%): [0.014, 0.038] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_74, Java HotSpot(TM) 64-Bit Server VM, 25.74-b02
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=60419:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 100 ms each
# Measurement: 5 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.cxd.benchmark.JMHSample_24_Inheritance.BenchmarkCos.bench

# Run progress: 33.33% complete, ETA 00:00:04
# Fork: 1 of 1
objc[71618]: Class JavaLaunchHelper is implemented in both /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/bin/java (0x105d0b4c0) and /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/lib/libinstrument.dylib (0x105d8f4e0). One of the two will be used. Which one is undefined.
# Warmup Iteration   1: 155.190 ns/op
# Warmup Iteration   2: 155.547 ns/op
# Warmup Iteration   3: 136.501 ns/op
# Warmup Iteration   4: 133.696 ns/op
# Warmup Iteration   5: 133.228 ns/op
Iteration   1: 140.189 ns/op
Iteration   2: 171.885 ns/op
Iteration   3: 130.216 ns/op
Iteration   4: 135.324 ns/op
Iteration   5: 243.843 ns/op


Result "com.cxd.benchmark.JMHSample_24_Inheritance.BenchmarkCos.bench":
  164.292 ±(99.9%) 182.320 ns/op [Average]
  (min, avg, max) = (130.216, 164.292, 243.843), stdev = 47.348
  CI (99.9%): [≈ 0, 346.612] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_74, Java HotSpot(TM) 64-Bit Server VM, 25.74-b02
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=60419:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 100 ms each
# Measurement: 5 iterations, 100 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.cxd.benchmark.JMHSample_24_Inheritance.BenchmarkSin.bench

# Run progress: 66.67% complete, ETA 00:00:02
# Fork: 1 of 1
objc[71619]: Class JavaLaunchHelper is implemented in both /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/bin/java (0x1072ed4c0) and /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/lib/libinstrument.dylib (0x1073714e0). One of the two will be used. Which one is undefined.
# Warmup Iteration   1: 195.348 ns/op
# Warmup Iteration   2: 206.399 ns/op
# Warmup Iteration   3: 167.828 ns/op
# Warmup Iteration   4: 182.833 ns/op
# Warmup Iteration   5: 180.519 ns/op
Iteration   1: 175.148 ns/op
Iteration   2: 170.831 ns/op
Iteration   3: 166.469 ns/op
Iteration   4: 166.570 ns/op
Iteration   5: 244.330 ns/op


Result "com.cxd.benchmark.JMHSample_24_Inheritance.BenchmarkSin.bench":
  184.670 ±(99.9%) 129.160 ns/op [Average]
  (min, avg, max) = (166.469, 184.670, 244.330), stdev = 33.542
  CI (99.9%): [55.510, 313.829] (assumes normal distribution)


# Run complete. Total time: 00:00:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt    Score     Error   Units
JMHSample_24_Inheritance.BenchmarkLog.bench  thrpt    5    0.026 ±   0.012  ops/ns
JMHSample_24_Inheritance.BenchmarkCos.bench   avgt    5  164.292 ± 182.320   ns/op
JMHSample_24_Inheritance.BenchmarkSin.bench   avgt    5  184.670 ± 129.160   ns/op
