package com.cxd.algorithm.sort;

/**
 * 冒泡排序
 *
 * 重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。
 * 走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。
 * 这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。
 *
 * 最好情况下：正序有序，则只需要比较n次。故，为O(n)
 *
 * 最坏情况下：逆序有序，则需要比较(n-1)+(n-2)+……+1，故为O(n*n)
 *
 * 排序过程中只交换相邻两个元素的位置。因此，当两个数相等时，是没必要交换两个数的位置的。所以，它们的相对位置并没有改变，冒泡排序算法是稳定的！
 *
 * @author childe
 * @date 2018/6/20 19:39
 **/
public class BubbleSort {
//    比较相邻的元素。如果第一个比第二个大，就交换他们两个。
//    对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。
//    针对所有的元素重复以上的步骤，除了最后一个。
//    持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。

    static int[] sort(int[] arr) {
        for (int i = 1; i < arr.length; i++) {
            // 设定一个标记，若为true，则表示此次循环没有进行交换，也就是待排序列已经有序，排序已经完成。
            boolean flag = true;
            for (int j = 0; j < arr.length - i; j++) {
                if (arr[j] > arr[j + 1]) {
                    int tmp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = tmp;
                    flag = false;
                }
            }

            if (flag) {
                break;
            }
        }
        return arr;
    }
}
