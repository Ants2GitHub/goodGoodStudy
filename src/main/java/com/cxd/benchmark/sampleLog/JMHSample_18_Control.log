# JMH version: 1.21
# VM version: JDK 1.8.0_74, Java HotSpot(TM) 64-Bit Server VM, 25.74-b02
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=56836:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads (1 group; 1x "ping", 1x "pong" in each group), will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.cxd.benchmark.JMHSample_18_Control.pingpong

# Run progress: 0.00% complete, ETA 00:01:40
# Fork: 1 of 1
objc[56303]: Class JavaLaunchHelper is implemented in both /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/bin/java (0x101c414c0) and /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/lib/libinstrument.dylib (0x101cc54e0). One of the two will be used. Which one is undefined.
# Warmup Iteration   1: 39239091.063 ops/s
# Warmup Iteration   2: 36721056.915 ops/s
# Warmup Iteration   3: 39691695.756 ops/s
# Warmup Iteration   4: 39096405.875 ops/s
# Warmup Iteration   5: 39378088.743 ops/s
Iteration   1: 40042362.937 ops/s
                 ping: 20021179.633 ops/s
                 pong: 20021183.304 ops/s

Iteration   2: 39279300.281 ops/s
                 ping: 19639872.846 ops/s
                 pong: 19639427.435 ops/s

Iteration   3: 40330448.572 ops/s
                 ping: 20165263.185 ops/s
                 pong: 20165185.387 ops/s

Iteration   4: 39966601.991 ops/s
                 ping: 19983305.877 ops/s
                 pong: 19983296.114 ops/s

Iteration   5: 39432425.335 ops/s
                 ping: 19716216.459 ops/s
                 pong: 19716208.876 ops/s



Result "com.cxd.benchmark.JMHSample_18_Control.pingpong":
  39810227.823 ±(99.9%) 1693394.815 ops/s [Average]
  (min, avg, max) = (39279300.281, 39810227.823, 40330448.572), stdev = 439769.256
  CI (99.9%): [38116833.008, 41503622.638] (assumes normal distribution)

Secondary result "com.cxd.benchmark.JMHSample_18_Control.pingpong:ping":
  19905167.600 ±(99.9%) 846480.530 ops/s [Average]
  (min, avg, max) = (19639872.846, 19905167.600, 20165263.185), stdev = 219828.305
  CI (99.9%): [19058687.070, 20751648.130] (assumes normal distribution)

Secondary result "com.cxd.benchmark.JMHSample_18_Control.pingpong:pong":
  19905060.223 ±(99.9%) 846914.390 ops/s [Average]
  (min, avg, max) = (19639427.435, 19905060.223, 20165185.387), stdev = 219940.978
  CI (99.9%): [19058145.833, 20751974.613] (assumes normal distribution)


# Run complete. Total time: 00:01:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                            Mode  Cnt         Score         Error  Units
JMHSample_18_Control.pingpong       thrpt    5  39810227.823 ± 1693394.815  ops/s
JMHSample_18_Control.pingpong:ping  thrpt    5  19905167.600 ±  846480.530  ops/s
JMHSample_18_Control.pingpong:pong  thrpt    5  19905060.223 ±  846914.390  ops/s
