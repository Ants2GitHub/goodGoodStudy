# JMH version: 1.21
# VM version: JDK 1.8.0_74, Java HotSpot(TM) 64-Bit Server VM, 25.74-b02
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=65132:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.cxd.benchmark.JMHSample_32_BulkWarmup.measure_c1

# Run progress: 0.00% complete, ETA 00:03:20
# Fork: 1 of 1
objc[76688]: Class JavaLaunchHelper is implemented in both /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/bin/java (0x100c1e4c0) and /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/lib/libinstrument.dylib (0x100ca24e0). One of the two will be used. Which one is undefined.
# Warmup Iteration   1: 6.502 ns/op
# Warmup Iteration   2: 5.799 ns/op
# Warmup Iteration   3: 5.767 ns/op
# Warmup Iteration   4: 5.768 ns/op
# Warmup Iteration   5: 6.053 ns/op
Iteration   1: 6.133 ns/op
Iteration   2: 6.241 ns/op
Iteration   3: 6.578 ns/op
Iteration   4: 6.508 ns/op
Iteration   5: 5.904 ns/op


Result "com.cxd.benchmark.JMHSample_32_BulkWarmup.measure_c1":
  6.273 ±(99.9%) 1.064 ns/op [Average]
  (min, avg, max) = (5.904, 6.273, 6.578), stdev = 0.276
  CI (99.9%): [5.209, 7.337] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_74, Java HotSpot(TM) 64-Bit Server VM, 25.74-b02
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=65132:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.cxd.benchmark.JMHSample_32_BulkWarmup.measure_c2

# Run progress: 50.00% complete, ETA 00:01:41
# Fork: 1 of 1
objc[76705]: Class JavaLaunchHelper is implemented in both /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/bin/java (0x10a3dd4c0) and /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/lib/libinstrument.dylib (0x10a4614e0). One of the two will be used. Which one is undefined.
# Warmup Iteration   1: 6.319 ns/op
# Warmup Iteration   2: 6.345 ns/op
# Warmup Iteration   3: 5.867 ns/op
# Warmup Iteration   4: 6.099 ns/op
# Warmup Iteration   5: 5.851 ns/op
Iteration   1: 5.838 ns/op
Iteration   2: 5.832 ns/op
Iteration   3: 6.243 ns/op
Iteration   4: 5.845 ns/op
Iteration   5: 5.910 ns/op


Result "com.cxd.benchmark.JMHSample_32_BulkWarmup.measure_c2":
  5.933 ±(99.9%) 0.678 ns/op [Average]
  (min, avg, max) = (5.832, 5.933, 6.243), stdev = 0.176
  CI (99.9%): [5.256, 6.611] (assumes normal distribution)


# Run complete. Total time: 00:03:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           Mode  Cnt  Score   Error  Units
JMHSample_32_BulkWarmup.measure_c1  avgt    5  6.273 ± 1.064  ns/op
JMHSample_32_BulkWarmup.measure_c2  avgt    5  5.933 ± 0.678  ns/op
