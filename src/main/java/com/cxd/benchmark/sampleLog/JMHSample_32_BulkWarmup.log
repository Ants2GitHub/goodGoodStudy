# JMH version: 1.21
# VM version: JDK 1.8.0_74, Java HotSpot(TM) 64-Bit Server VM, 25.74-b02
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=65095:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Warmup: <none>
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.cxd.benchmark.JMHSample_32_BulkWarmup.measure_c1

# Run progress: 0.00% complete, ETA 00:05:00
# Fork: 1 of 1
objc[76612]: Class JavaLaunchHelper is implemented in both /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/bin/java (0x10bdda4c0) and /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/lib/libinstrument.dylib (0x10be5e4e0). One of the two will be used. Which one is undefined.
# Warmup Iteration   1: 6.393 ns/op
# Warmup Iteration   2: 5.837 ns/op
# Warmup Iteration   3: 5.809 ns/op
# Warmup Iteration   4: 5.896 ns/op
# Warmup Iteration   5: 5.766 ns/op

# Warmup Iteration   1: 23.370 ns/op
# Warmup Iteration   2: 22.288 ns/op
# Warmup Iteration   3: 20.728 ns/op
# Warmup Iteration   4: 20.307 ns/op
# Warmup Iteration   5: 20.261 ns/op

Iteration   1: 20.502 ns/op
Iteration   2: 20.821 ns/op
Iteration   3: 22.153 ns/op
Iteration   4: 21.440 ns/op
Iteration   5: 22.924 ns/op


Result "com.cxd.benchmark.JMHSample_32_BulkWarmup.measure_c1":
  21.568 ±(99.9%) 3.798 ns/op [Average]
  (min, avg, max) = (20.502, 21.568, 22.924), stdev = 0.986
  CI (99.9%): [17.770, 25.367] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_74, Java HotSpot(TM) 64-Bit Server VM, 25.74-b02
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=65095:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Warmup: <none>
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.cxd.benchmark.JMHSample_32_BulkWarmup.measure_c2

# Run progress: 16.67% complete, ETA 00:12:35
# Fork: 1 of 1
objc[76635]: Class JavaLaunchHelper is implemented in both /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/bin/java (0x1028434c0) and /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/lib/libinstrument.dylib (0x1028c74e0). One of the two will be used. Which one is undefined.
# Warmup Iteration   1: 6.291 ns/op
# Warmup Iteration   2: 6.755 ns/op
# Warmup Iteration   3: 5.942 ns/op
# Warmup Iteration   4: 6.147 ns/op
# Warmup Iteration   5: 6.676 ns/op

# Warmup Iteration   1: 25.313 ns/op
# Warmup Iteration   2: 28.213 ns/op
# Warmup Iteration   3: 22.805 ns/op
# Warmup Iteration   4: 25.096 ns/op
# Warmup Iteration   5: 20.583 ns/op

Iteration   1: 20.476 ns/op
Iteration   2: 21.090 ns/op
Iteration   3: 20.435 ns/op
Iteration   4: 20.435 ns/op
Iteration   5: 20.440 ns/op


Result "com.cxd.benchmark.JMHSample_32_BulkWarmup.measure_c2":
  20.575 ±(99.9%) 1.109 ns/op [Average]
  (min, avg, max) = (20.435, 20.575, 21.090), stdev = 0.288
  CI (99.9%): [19.466, 21.685] (assumes normal distribution)


# Run complete. Total time: 00:05:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           Mode  Cnt   Score   Error  Units
JMHSample_32_BulkWarmup.measure_c1  avgt    5  21.568 ± 3.798  ns/op
JMHSample_32_BulkWarmup.measure_c2  avgt    5  20.575 ± 1.109  ns/op
