# JMH version: 1.21
# VM version: JDK 1.8.0_74, Java HotSpot(TM) 64-Bit Server VM, 25.74-b02
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=61392:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.cxd.benchmark.JMHSample_10_ConstantFold.baseline

# Run progress: 0.00% complete, ETA 00:06:40
# Fork: 1 of 1
objc[39401]: Class JavaLaunchHelper is implemented in both /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/bin/java (0x10c15f4c0) and /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/lib/libinstrument.dylib (0x10c1e34e0). One of the two will be used. Which one is undefined.
# Warmup Iteration   1: 3.520 ns/op
# Warmup Iteration   2: 3.431 ns/op
# Warmup Iteration   3: 2.751 ns/op
# Warmup Iteration   4: 2.743 ns/op
# Warmup Iteration   5: 2.756 ns/op
Iteration   1: 2.824 ns/op
Iteration   2: 2.913 ns/op
Iteration   3: 2.803 ns/op
Iteration   4: 2.756 ns/op
Iteration   5: 2.737 ns/op


Result "com.cxd.benchmark.JMHSample_10_ConstantFold.baseline":
  2.807 ±(99.9%) 0.265 ns/op [Average]
  (min, avg, max) = (2.737, 2.807, 2.913), stdev = 0.069
  CI (99.9%): [2.542, 3.072] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_74, Java HotSpot(TM) 64-Bit Server VM, 25.74-b02
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=61392:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.cxd.benchmark.JMHSample_10_ConstantFold.measureRight

# Run progress: 25.00% complete, ETA 00:05:04
# Fork: 1 of 1
objc[39413]: Class JavaLaunchHelper is implemented in both /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/bin/java (0x10b7d24c0) and /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/lib/libinstrument.dylib (0x10cfeb4e0). One of the two will be used. Which one is undefined.
# Warmup Iteration   1: 23.928 ns/op
# Warmup Iteration   2: 23.681 ns/op
# Warmup Iteration   3: 23.984 ns/op
# Warmup Iteration   4: 23.961 ns/op
# Warmup Iteration   5: 24.123 ns/op
Iteration   1: 24.190 ns/op
Iteration   2: 24.216 ns/op
Iteration   3: 24.000 ns/op
Iteration   4: 23.974 ns/op
Iteration   5: 23.947 ns/op


Result "com.cxd.benchmark.JMHSample_10_ConstantFold.measureRight":
  24.065 ±(99.9%) 0.490 ns/op [Average]
  (min, avg, max) = (23.947, 24.065, 24.216), stdev = 0.127
  CI (99.9%): [23.575, 24.556] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_74, Java HotSpot(TM) 64-Bit Server VM, 25.74-b02
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=61392:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.cxd.benchmark.JMHSample_10_ConstantFold.measureWrong_1

# Run progress: 50.00% complete, ETA 00:03:22
# Fork: 1 of 1
objc[39425]: Class JavaLaunchHelper is implemented in both /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/bin/java (0x1080374c0) and /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/lib/libinstrument.dylib (0x1080bb4e0). One of the two will be used. Which one is undefined.
# Warmup Iteration   1: 3.374 ns/op
# Warmup Iteration   2: 3.398 ns/op
# Warmup Iteration   3: 2.732 ns/op
# Warmup Iteration   4: 2.728 ns/op
# Warmup Iteration   5: 2.727 ns/op
Iteration   1: 2.735 ns/op
Iteration   2: 2.734 ns/op
Iteration   3: 2.734 ns/op
Iteration   4: 2.727 ns/op
Iteration   5: 2.729 ns/op


Result "com.cxd.benchmark.JMHSample_10_ConstantFold.measureWrong_1":
  2.732 ±(99.9%) 0.014 ns/op [Average]
  (min, avg, max) = (2.727, 2.732, 2.735), stdev = 0.004
  CI (99.9%): [2.718, 2.745] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_74, Java HotSpot(TM) 64-Bit Server VM, 25.74-b02
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=61392:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.cxd.benchmark.JMHSample_10_ConstantFold.measureWrong_2

# Run progress: 75.00% complete, ETA 00:01:41
# Fork: 1 of 1
objc[39436]: Class JavaLaunchHelper is implemented in both /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/bin/java (0x104d4a4c0) and /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/lib/libinstrument.dylib (0x104dce4e0). One of the two will be used. Which one is undefined.
# Warmup Iteration   1: 3.371 ns/op
# Warmup Iteration   2: 3.415 ns/op
# Warmup Iteration   3: 2.725 ns/op
# Warmup Iteration   4: 2.730 ns/op
# Warmup Iteration   5: 2.731 ns/op
Iteration   1: 2.733 ns/op
Iteration   2: 2.726 ns/op
Iteration   3: 2.730 ns/op
Iteration   4: 2.728 ns/op
Iteration   5: 2.726 ns/op


Result "com.cxd.benchmark.JMHSample_10_ConstantFold.measureWrong_2":
  2.728 ±(99.9%) 0.011 ns/op [Average]
  (min, avg, max) = (2.726, 2.728, 2.733), stdev = 0.003
  CI (99.9%): [2.717, 2.739] (assumes normal distribution)


# Run complete. Total time: 00:06:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt   Score   Error  Units
JMHSample_10_ConstantFold.baseline        avgt    5   2.807 ± 0.265  ns/op
JMHSample_10_ConstantFold.measureRight    avgt    5  24.065 ± 0.490  ns/op
JMHSample_10_ConstantFold.measureWrong_1  avgt    5   2.732 ± 0.014  ns/op
JMHSample_10_ConstantFold.measureWrong_2  avgt    5   2.728 ± 0.011  ns/op
