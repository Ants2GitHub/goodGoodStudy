# JMH version: 1.21
# VM version: JDK 1.8.0_74, Java HotSpot(TM) 64-Bit Server VM, 25.74-b02
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=62274:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.cxd.benchmark.JMHSample_12_Forking.measure_4_forked_c1

# Run progress: 0.00% complete, ETA 00:08:20
# Fork: 1 of 1
objc[40569]: Class JavaLaunchHelper is implemented in both /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/bin/java (0x106b7f4c0) and /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/lib/libinstrument.dylib (0x1083a84e0). One of the two will be used. Which one is undefined.
# Warmup Iteration   1: 5.235 ns/op
# Warmup Iteration   2: 5.304 ns/op
# Warmup Iteration   3: 4.346 ns/op
# Warmup Iteration   4: 4.350 ns/op
# Warmup Iteration   5: 4.342 ns/op
Iteration   1: 4.407 ns/op
Iteration   2: 4.356 ns/op
Iteration   3: 4.345 ns/op
Iteration   4: 4.358 ns/op
Iteration   5: 4.345 ns/op


Result "com.cxd.benchmark.JMHSample_12_Forking.measure_4_forked_c1":
  4.362 ±(99.9%) 0.099 ns/op [Average]
  (min, avg, max) = (4.345, 4.362, 4.407), stdev = 0.026
  CI (99.9%): [4.263, 4.461] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_74, Java HotSpot(TM) 64-Bit Server VM, 25.74-b02
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=62274:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.cxd.benchmark.JMHSample_12_Forking.measure_5_forked_c2

# Run progress: 20.00% complete, ETA 00:06:45
# Fork: 1 of 1
objc[40581]: Class JavaLaunchHelper is implemented in both /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/bin/java (0x109e614c0) and /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/lib/libinstrument.dylib (0x109ee54e0). One of the two will be used. Which one is undefined.
# Warmup Iteration   1: 5.050 ns/op
# Warmup Iteration   2: 5.283 ns/op
# Warmup Iteration   3: 4.346 ns/op
# Warmup Iteration   4: 4.337 ns/op
# Warmup Iteration   5: 4.341 ns/op
Iteration   1: 4.336 ns/op
Iteration   2: 4.359 ns/op
Iteration   3: 4.337 ns/op
Iteration   4: 4.333 ns/op
Iteration   5: 4.340 ns/op


Result "com.cxd.benchmark.JMHSample_12_Forking.measure_5_forked_c2":
  4.341 ±(99.9%) 0.040 ns/op [Average]
  (min, avg, max) = (4.333, 4.341, 4.359), stdev = 0.010
  CI (99.9%): [4.301, 4.381] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_74, Java HotSpot(TM) 64-Bit Server VM, 25.74-b02
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=62274:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.cxd.benchmark.JMHSample_12_Forking.measure_1_c1

# Run progress: 40.00% complete, ETA 00:05:03
# Fork: N/A, test runs in the host VM
# *** WARNING: Non-forked runs may silently omit JVM options, mess up profilers, disable compiler hints, etc. ***
# *** WARNING: Use non-forked runs only for debugging purposes, not for actual performance runs. ***
# Warmup Iteration   1: 2.792 ns/op
# Warmup Iteration   2: 2.803 ns/op
# Warmup Iteration   3: 2.802 ns/op
# Warmup Iteration   4: 2.794 ns/op
# Warmup Iteration   5: 2.798 ns/op
Iteration   1: 2.879 ns/op
Iteration   2: 2.895 ns/op
Iteration   3: 2.794 ns/op
Iteration   4: 2.784 ns/op
Iteration   5: 2.785 ns/op

Result "com.cxd.benchmark.JMHSample_12_Forking.measure_1_c1":
  2.827 ±(99.9%) 0.211 ns/op [Average]
  (min, avg, max) = (2.784, 2.827, 2.895), stdev = 0.055
  CI (99.9%): [2.617, 3.038] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_74, Java HotSpot(TM) 64-Bit Server VM, 25.74-b02
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=62274:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.cxd.benchmark.JMHSample_12_Forking.measure_2_c2

# Run progress: 60.00% complete, ETA 00:03:21
# Fork: N/A, test runs in the host VM
# *** WARNING: Non-forked runs may silently omit JVM options, mess up profilers, disable compiler hints, etc. ***
# *** WARNING: Use non-forked runs only for debugging purposes, not for actual performance runs. ***
# Warmup Iteration   1: 20.300 ns/op
# Warmup Iteration   2: 21.016 ns/op
# Warmup Iteration   3: 21.168 ns/op
# Warmup Iteration   4: 20.591 ns/op
# Warmup Iteration   5: 20.412 ns/op
Iteration   1: 20.509 ns/op
Iteration   2: 20.398 ns/op
Iteration   3: 20.449 ns/op
Iteration   4: 20.808 ns/op
Iteration   5: 20.258 ns/op

Result "com.cxd.benchmark.JMHSample_12_Forking.measure_2_c2":
  20.484 ±(99.9%) 0.783 ns/op [Average]
  (min, avg, max) = (20.258, 20.484, 20.808), stdev = 0.203
  CI (99.9%): [19.701, 21.267] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_74, Java HotSpot(TM) 64-Bit Server VM, 25.74-b02
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_74.jdk/Contents/Home/jre/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=62274:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.cxd.benchmark.JMHSample_12_Forking.measure_3_c1_again

# Run progress: 80.00% complete, ETA 00:01:40
# Fork: N/A, test runs in the host VM
# *** WARNING: Non-forked runs may silently omit JVM options, mess up profilers, disable compiler hints, etc. ***
# *** WARNING: Use non-forked runs only for debugging purposes, not for actual performance runs. ***
# Warmup Iteration   1: 20.920 ns/op
# Warmup Iteration   2: 20.245 ns/op
# Warmup Iteration   3: 20.003 ns/op
# Warmup Iteration   4: 20.413 ns/op
# Warmup Iteration   5: 19.944 ns/op
Iteration   1: 19.935 ns/op
Iteration   2: 19.528 ns/op
Iteration   3: 19.576 ns/op
Iteration   4: 19.531 ns/op
Iteration   5: 19.544 ns/op

Result "com.cxd.benchmark.JMHSample_12_Forking.measure_3_c1_again":
  19.623 ±(99.9%) 0.675 ns/op [Average]
  (min, avg, max) = (19.528, 19.623, 19.935), stdev = 0.175
  CI (99.9%): [18.947, 20.298] (assumes normal distribution)


# Run complete. Total time: 00:08:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt   Score   Error  Units
JMHSample_12_Forking.measure_1_c1         avgt    5   2.827 ± 0.211  ns/op
JMHSample_12_Forking.measure_2_c2         avgt    5  20.484 ± 0.783  ns/op
JMHSample_12_Forking.measure_3_c1_again   avgt    5  19.623 ± 0.675  ns/op
JMHSample_12_Forking.measure_4_forked_c1  avgt    5   4.362 ± 0.099  ns/op
JMHSample_12_Forking.measure_5_forked_c2  avgt    5   4.341 ± 0.040  ns/op
